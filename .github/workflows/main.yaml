name: main.yaml
on:
    push:

env:
    PROJECT_ID: ${{ secrets.GKE_PROJECT }}
    GKE_CLUSTER: dwk-cluster
    GKE_REGION: europe-west4
    GKE_ZONE: europe-west4-a
    REGISTRY: europe-west4-docker.pkg.dev
    REPOSITORY: my-repository
    BRANCH: ${{ github.ref_name }}
    ARCHITECTURE: linux/amd64
    FRONTEND_IMAGE_TAG: europe-west4-docker.pkg.dev/${{ secrets.GKE_PROJECT }}/my-repository/frontend:${{ github.ref_name }}-${{ github.sha }}-${{ github.run_id }}
    TODO_SERVICE_IMAGE_TAG: europe-west4-docker.pkg.dev/${{ secrets.GKE_PROJECT }}/my-repository/todo-service:${{ github.ref_name }}-${{ github.sha }}-${{ github.run_id }}
    IMAGE_SERVICE_IMAGE_TAG: europe-west4-docker.pkg.dev/${{ secrets.GKE_PROJECT }}/my-repository/image-service:${{ github.ref_name }}-${{ github.sha }}-${{ github.run_id }}

jobs:
    build-publish-deploy:
        name: Build, Publish and Deploy
        runs-on: ubuntu-latest
        environment: development

        steps:
            - name: Checkout
              uses: actions/checkout@v5

            - name: Sanitize Branch Name
              id: branch_sanitizer
              run: |
                  # Convert branch name to lowercase
                  SANITIZED_BRANCH=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]')
                  # Replace any characters that are not a-z, 0-9, or - with a hyphen
                  SANITIZED_BRANCH=$(echo "$SANITIZED_BRANCH" | sed -E 's/[^a-z0-9-]+/-/g')
                  # Remove leading/trailing hyphens and shorten to a maximum of 63 characters
                  SANITIZED_BRANCH=$(echo "$SANITIZED_BRANCH" | sed -E 's/^-+|-+$//g' | cut -c1-63)
                  # The namespace must start with an alphabet character or a digit
                  if [[ ! "$SANITIZED_BRANCH" =~ ^[a-z0-9] ]]; then
                      SANITIZED_BRANCH="ns-$SANITIZED_BRANCH"
                  fi
                  # Set the output variable for the sanitized branch name
                  echo "sanitized_name=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT

            - uses: google-github-actions/auth@v2
              with:
                  credentials_json: "${{ secrets.GKE_SA_KEY }}"

            - name: "Set up Cloud SDK"
              uses: google-github-actions/setup-gcloud@v2

            - name: "Use gcloud CLI"
              run: gcloud info

            - name: "Configure Docker"
              run: gcloud auth configure-docker $REGISTRY --quiet

            - name: "Get GKE credentials"
              uses: "google-github-actions/get-gke-credentials@v2"
              with:
                  cluster_name: "${{ env.GKE_CLUSTER }}"
                  project_id: "${{ env.PROJECT_ID }}"
                  location: "${{ env.GKE_ZONE }}"

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
              with:
                  platforms: ${{ env.ARCHITECTURE }}

            - name: Build and Push Frontend Image
              uses: docker/build-push-action@v6
              with:
                  platforms: ${{ env.ARCHITECTURE }}
                  context: ./todo-app/frontend
                  push: true
                  tags: ${{ env.FRONTEND_IMAGE_TAG }}

            - name: Build and Push Todo Service Image
              uses: docker/build-push-action@v6
              with:
                  platforms: ${{ env.ARCHITECTURE }}
                  context: ./todo-app/backend/todo-service
                  push: true
                  tags: ${{ env.TODO_SERVICE_IMAGE_TAG }}

            - name: Build and Push Image Service
              uses: docker/build-push-action@v6
              with:
                  platforms: ${{ env.ARCHITECTURE }}
                  context: ./todo-app/backend/image-service
                  push: true
                  tags: ${{ env.IMAGE_SERVICE_IMAGE_TAG }}

            - name: Set up Kustomize
              uses: imranismail/setup-kustomize@v2.1.0

            - name: Deploy
              run: |-
                  cd todo-app/manifests
                  NAMESPACE=${{ steps.branch_sanitizer.outputs.sanitized_name }}
                  if [[ "$NAMESPACE" == "main" ]]; then
                      NAMESPACE="project"
                  fi
                  kubectl create namespace $NAMESPACE || true
                  kubectl config set-context --current --namespace=$NAMESPACE
                  kustomize edit set namespace $NAMESPACE
                  kustomize edit set image europe-west4-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/frontend=$FRONTEND_IMAGE_TAG
                  kustomize edit set image europe-west4-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/todo-service=$TODO_SERVICE_IMAGE_TAG
                  kustomize edit set image europe-west4-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/image-service=$IMAGE_SERVICE_IMAGE_TAG
                  kustomize build . | kubectl apply -f -
                  kubectl rollout status deployment todo-app-frontend -n $NAMESPACE
                  kubectl rollout status deployment todo-service -n $NAMESPACE
                  kubectl rollout status deployment image-service -n $NAMESPACE
                  kubectl get services -o wide
